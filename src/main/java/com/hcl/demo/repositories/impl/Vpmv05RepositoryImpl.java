package com.hcl.demo.repositories.impl;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.hcl.demo.dataobject.Vpmv05Wrapper;
import com.hcl.demo.dataobject.Vpmv05BO;
import com.hcl.demo.exception.DemoDataAccessException;
import com.hcl.demo.repositories.IVpmv05Repository;
import com.hcl.demo.util.DemoConstants;
import com.hcl.demo.util.DemoLogger;


/*************************************************************************
 *
 * HCL CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * HCL is a trademark of HCL Company.
 *
 *Copyright © 2020 HCL. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of HCL
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to HCL and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from HCL.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :

@Repository
public class Vpmv05RepositoryImpl implements IVpmv05Repository {

    private static final DemoLogger LOGGER = DemoLogger.create(Vpmv05RepositoryImpl.class);

   @PersistenceContext
    private EntityManager entityMgr;

    @Autowired(required=true)
    private JdbcTemplate jdbcTemplateObj;

    /*
      * Method insertTvvpsku0
      * @param vpmv05Wrapper
      * @return vpmv05Wrapper
      * @throws DemoDataAccessException
    */
    @Override
    @Transactional
    public Vpmv05Wrapper insertTvvpsku0(Vpmv05Wrapper vpmv05Wrapper) throws DemoDataAccessException {
    	//test( vpmv05Wrapper);//Vikash changes 
    	
        //String query = "INSERT INTO TVVPSKU (VV2_KUNDID, VV2_GRUPPID, VV2_BERKOD, VV2_BER_DAT, VV2_LKOD, VV2_MYNDK, VV2_PNR, VV2_KATEGORI, VV2_FORML, VV2_FSLAG, VV2_DEBKOD, VV2_FTEKNGR, VV2_URSPRUNG, VV2_FROMDATUM, VV2_UPPHALDER, VV2_UPPHDAT, VV2_UPPHKOD, VV2_PA_ANTM, VV2_TJTFAKT, VV2_UPPRFAKT, VV2_BELOPP, VV2_ITT, VV2_MTT, VV2_SCHABLON, VV2_PUNDERL, VV2_PSKULD, VV2_PUNDERLAR, VV2_KBIDR, VV2_FELSTS, VV2_A_PNR, VV2_PSKULD_STI, VV2_KAPFAKT, VV2_RETRO  ) VALUES (:VV2-KUNDID,  :VV2-GRUPPID ,:VV2-BERKOD ,:VV2-BER-DAT ,:VV2-LKOD ,:VV2-MYNDK ,:VV2-PNR ,:VV2-KATEGORI ,:VV2-FORML ,:VV2-FSLAG ,:VV2-DEBKOD ,:VV2-FTEKNGR ,:VV2-URSPRUNG ,:VV2-FROMDATUM ,:VV2-UPPHALDER ,:VV2-UPPHDAT ,:VV2-UPPHKOD ,:VV2-PA-ANTM ,:VV2-TJTFAKT ,:VV2-UPPRFAKT ,:VV2-BELOPP ,:VV2-ITT ,:VV2-MTT ,:VV2-SCHABLON ,:VV2-PUNDERL ,:VV2-PSKULD ,:VV2-PUNDERLAR ,:VV2-KBIDR ,:VV2-FELSTS ,:VV2-A-PNR ,:VV2-PSKULD-STI ,:VV2-KAPFAKT ,:VV2-RETRO )";
    	  String query = "INSERT INTO TVVPSKU (VV2_KUNDID, VV2_GRUPPID, VV2_BERKOD, VV2_BER_DAT, VV2_LKOD, VV2_MYNDK, VV2_PNR, VV2_KATEGORI, VV2_FORML, VV2_FSLAG, VV2_DEBKOD, VV2_FTEKNGR, VV2_URSPRUNG, VV2_FROMDATUM, VV2_UPPHALDER, VV2_UPPHDAT, VV2_UPPHKOD, VV2_PA_ANTM, VV2_TJTFAKT, VV2_UPPRFAKT, VV2_BELOPP, VV2_ITT, VV2_MTT, VV2_SCHABLON, VV2_PUNDERL, VV2_PSKULD, VV2_PUNDERLAR, VV2_KBIDR, VV2_FELSTS, VV2_A_PNR, VV2_PSKULD_STI, VV2_KAPFAKT, VV2_RETRO  ) VALUES (?,  ? ,?,? ,? ,? ,? ,? ,? ,? ,?,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,?,? ,? ,?,?,? ,? ,? ,? ,? ,? ,? )";
    	
        Vpmv05BO Vpb = vpmv05Wrapper.getFirst(vpmv05Wrapper.getVpmv05BO(), Vpmv05BO.class);
        LOGGER.debug(DemoConstants.REQUEST, query);
        try {
        	 //vikash changes 
          //  int count = jdbcTemplateObj.update(  query, vpmv05.getTvvpsku().getVv2Kundid(), vpmv05.getTvvpsku().getVv2Gruppid(), vpmv05.getTvvpsku().getVv2Berkod(), vpmv05.getTvvpsku().getVv2BerDat(), vpmv05.getTvvpsku().getVv2Lkod(), vpmv05.getTvvpsku().getVv2Myndk(), vpmv05.getTvvpsku().getVv2Pnr(), vpmv05.getTvvpsku().getVv2Kategori(), vpmv05.getTvvpsku().getVv2Forml(), vpmv05.getTvvpsku().getVv2Fslag(), vpmv05.getTvvpsku().getVv2Debkod(), vpmv05.getTvvpsku().getVv2Ftekngr(), vpmv05.getTvvpsku().getVv2Ursprung(), vpmv05.getTvvpsku().getVv2Fromdatum(), vpmv05.getTvvpsku().getVv2Upphalder(), vpmv05.getTvvpsku().getVv2Upphdat(), vpmv05.getTvvpsku().getVv2Upphkod(), vpmv05.getTvvpsku().getVv2PaAntm(), vpmv05.getTvvpsku().getVv2Tjtfakt(), vpmv05.getTvvpsku().getVv2Upprfakt(), vpmv05.getTvvpsku().getVv2Belopp(), vpmv05.getTvvpsku().getVv2Itt(), vpmv05.getTvvpsku().getVv2Mtt(), vpmv05.getTvvpsku().getVv2Schablon(), vpmv05.getTvvpsku().getVv2Punderl(), vpmv05.getTvvpsku().getVv2Pskuld(), vpmv05.getTvvpsku().getVv2Punderlar(), vpmv05.getTvvpsku().getVv2Kbidr(), vpmv05.getTvvpsku().getVv2Felsts(), vpmv05.getTvvpsku().getVv2APnr(), vpmv05.getTvvpsku().getVv2PskuldSti(), vpmv05.getTvvpsku().getVv2Kapfakt(), vpmv05.getTvvpsku().getVv2Retro());
        	  int count = jdbcTemplateObj.update(  query, Vpb.getTvvpsku().getVv2Kundid(), Vpb.getTvvpsku().getVv2Gruppid(), Vpb.getTvvpsku().getVv2Berkod(), Vpb.getTvvpsku().getVv2BerDat(), Vpb.getTvvpsku().getVv2Lkod(), Vpb.getTvvpsku().getVv2Myndk(), Vpb.getTvvpsku().getVv2Pnr(), Vpb.getTvvpsku().getVv2Kategori(), Vpb.getTvvpsku().getVv2Forml(), Vpb.getTvvpsku().getVv2Fslag(), Vpb.getTvvpsku().getVv2Debkod(), Vpb.getTvvpsku().getVv2Ftekngr(), Vpb.getTvvpsku().getVv2Ursprung(), Vpb.getTvvpsku().getVv2Fromdatum(), Vpb.getTvvpsku().getVv2Upphalder(), Vpb.getTvvpsku().getVv2Upphdat(), Vpb.getTvvpsku().getVv2Upphkod(), Vpb.getTvvpsku().getVv2PaAntm(), Vpb.getTvvpsku().getVv2Tjtfakt(), Vpb.getTvvpsku().getVv2Upprfakt(), Vpb.getTvvpsku().getVv2Belopp(), Vpb.getTvvpsku().getVv2Itt(), Vpb.getTvvpsku().getVv2Mtt(), Vpb.getTvvpsku().getVv2Schablon(), Vpb.getTvvpsku().getVv2Punderl(), Vpb.getTvvpsku().getVv2Pskuld(), Vpb.getTvvpsku().getVv2Punderlar(), Vpb.getTvvpsku().getVv2Kbidr(), Vpb.getTvvpsku().getVv2Felsts(), Vpb.getTvvpsku().getVv2APnr(), Vpb.getTvvpsku().getVv2PskuldSti(), Vpb.getTvvpsku().getVv2Kapfakt(), Vpb.getTvvpsku().getVv2Retro());
            if(count==0) {
                vpmv05Wrapper.setExeStatus(DemoConstants.SQLNORECORDCODE);
            } else {
                vpmv05Wrapper.setExeStatus(DemoConstants.SQLSUCCESSCODE);
            }
        } catch(DataAccessException se) {
           SQLException ex=(SQLException) se.getCause();
		        if(null!=ex) {
		        if(ex.getSQLState().equals("23505")) {
		        	vpmv05Wrapper.setSqlStatusCode(DemoConstants.SQLSTATE);
		        	return vpmv05Wrapper;
		        }}
        
        	//se.getMostSpecificCause().getLocalizedMessage()
            vpmv05Wrapper.setSqlStatusCode(DemoConstants.SQLERRORCODE);
            LOGGER.error(DemoConstants.ERROR, se);
            throw new DemoDataAccessException(se, DemoConstants.SQLERRORCODE);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpmv05Wrapper);
        return vpmv05Wrapper;
    }
    
    

    /*
      * Method updateTvvpsku1
      * @param vpmv05Wrapper
      * @return vpmv05Wrapper
      * @throws DemoDataAccessException
    */
    @Override
    @Transactional
    public Vpmv05Wrapper updateTvvpsku1(Vpmv05Wrapper vpmv05Wrapper) throws DemoDataAccessException {
        //String query = "UPDATE TVVPSKU SET VV2_KUNDID = :VV2-KUNDID, VV2_GRUPPID = :VV2-GRUPPID, VV2_BERKOD = :VV2-BERKOD, VV2_BER_DAT = :VV2-BER-DAT, VV2_LKOD = :VV2-LKOD, VV2_MYNDK = :VV2-MYNDK, VV2_PNR = :VV2-PNR, VV2_KATEGORI = :VV2-KATEGORI, VV2_FORML = :VV2-FORML, VV2_FSLAG = :VV2-FSLAG, VV2_DEBKOD = :VV2-DEBKOD, VV2_FTEKNGR = :VV2-FTEKNGR, VV2_URSPRUNG = :VV2-URSPRUNG, VV2_FROMDATUM = :VV2-FROMDATUM, VV2_UPPHALDER = :VV2-UPPHALDER, VV2_UPPHDAT = :VV2-UPPHDAT, VV2_UPPHKOD = :VV2-UPPHKOD, VV2_PA_ANTM = :VV2-PA-ANTM, VV2_TJTFAKT = :VV2-TJTFAKT, VV2_UPPRFAKT = :VV2-UPPRFAKT, VV2_BELOPP = :VV2-BELOPP, VV2_ITT = :VV2-ITT, VV2_MTT = :VV2-MTT, VV2_SCHABLON = :VV2-SCHABLON, VV2_PUNDERL = :VV2-PUNDERL, VV2_PSKULD = :VV2-PSKULD, VV2_PUNDERLAR = :VV2-PUNDERLAR, VV2_KBIDR = :VV2-KBIDR, VV2_FELSTS = :VV2-FELSTS, VV2_A_PNR = :VV2-A-PNR, VV2_PSKULD_STI = :VV2-PSKULD-STI, VV2_KAPFAKT = :VV2-KAPFAKT, VV2_RETRO = :VV2-RETRO WHERE VV2_PNR=:VV2-PNR  AND VV2_KUNDID =:VV2-KUNDID  AND VV2_GRUPPID =:VV2-GRUPPID  AND VV2_BER_DAT =:VV2-BER-DAT  ";
    	
    	String query = "UPDATE TVVPSKU SET VV2_KUNDID = ?, VV2_GRUPPID = ?, VV2_BERKOD = ?, VV2_BER_DAT = ?, VV2_LKOD = ?, VV2_MYNDK = ?, VV2_PNR = ?, VV2_KATEGORI = ?, VV2_FORML = ?, VV2_FSLAG = ?, VV2_DEBKOD = ?, VV2_FTEKNGR = ?, VV2_URSPRUNG = ?, VV2_FROMDATUM = ?, VV2_UPPHALDER = ?, VV2_UPPHDAT = ?, VV2_UPPHKOD = ?, VV2_PA_ANTM = ?, VV2_TJTFAKT = ?, VV2_UPPRFAKT = ?, VV2_BELOPP = ?, VV2_ITT = ?, VV2_MTT = ?, VV2_SCHABLON = ?, VV2_PUNDERL = ?, VV2_PSKULD = ?, VV2_PUNDERLAR = ?, VV2_KBIDR = ?, VV2_FELSTS = ?, VV2_A_PNR = ?, VV2_PSKULD_STI = ?, VV2_KAPFAKT = ?, VV2_RETRO = ? WHERE VV2_PNR=?  AND VV2_KUNDID =?  AND VV2_GRUPPID =?  AND VV2_BER_DAT =?";
        Vpmv05BO vpmv05 = vpmv05Wrapper.getFirst(vpmv05Wrapper.getVpmv05BO(), Vpmv05BO.class);
        LOGGER.debug(DemoConstants.REQUEST, query);
        try {
            int count = jdbcTemplateObj.update(  query, vpmv05.getTvvpsku().getVv2Kundid(), vpmv05.getTvvpsku().getVv2Gruppid(), vpmv05.getTvvpsku().getVv2Berkod(), vpmv05.getTvvpsku().getVv2BerDat(), vpmv05.getTvvpsku().getVv2Lkod(), vpmv05.getTvvpsku().getVv2Myndk(), vpmv05.getTvvpsku().getVv2Pnr(), vpmv05.getTvvpsku().getVv2Kategori(), vpmv05.getTvvpsku().getVv2Forml(), vpmv05.getTvvpsku().getVv2Fslag(), vpmv05.getTvvpsku().getVv2Debkod(), vpmv05.getTvvpsku().getVv2Ftekngr(), vpmv05.getTvvpsku().getVv2Ursprung(), vpmv05.getTvvpsku().getVv2Fromdatum(), vpmv05.getTvvpsku().getVv2Upphalder(), vpmv05.getTvvpsku().getVv2Upphdat(), vpmv05.getTvvpsku().getVv2Upphkod(), vpmv05.getTvvpsku().getVv2PaAntm(), vpmv05.getTvvpsku().getVv2Tjtfakt(), vpmv05.getTvvpsku().getVv2Upprfakt(), vpmv05.getTvvpsku().getVv2Belopp(), vpmv05.getTvvpsku().getVv2Itt(), vpmv05.getTvvpsku().getVv2Mtt(), vpmv05.getTvvpsku().getVv2Schablon(), vpmv05.getTvvpsku().getVv2Punderl(), vpmv05.getTvvpsku().getVv2Pskuld(), vpmv05.getTvvpsku().getVv2Punderlar(), vpmv05.getTvvpsku().getVv2Kbidr(), vpmv05.getTvvpsku().getVv2Felsts(), vpmv05.getTvvpsku().getVv2APnr(), vpmv05.getTvvpsku().getVv2PskuldSti(), vpmv05.getTvvpsku().getVv2Kapfakt(), vpmv05.getTvvpsku().getVv2Retro(), vpmv05.getTvvpsku().getVv2Pnr(), vpmv05.getTvvpsku().getVv2Kundid(), vpmv05.getTvvpsku().getVv2Gruppid(), vpmv05.getTvvpsku().getVv2BerDat());
            if(count==0) {
                vpmv05Wrapper.setExeStatus(DemoConstants.SQLNORECORDCODE);
            } else {
                vpmv05Wrapper.setExeStatus(DemoConstants.SQLSUCCESSCODE);
            }
        } catch(DataAccessException se) {
            vpmv05Wrapper.setSqlStatusCode(DemoConstants.SQLERRORCODE);
            LOGGER.error(DemoConstants.ERROR, se);
            throw new DemoDataAccessException(se, DemoConstants.SQLERRORCODE);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpmv05Wrapper);
        return vpmv05Wrapper;
    }


}