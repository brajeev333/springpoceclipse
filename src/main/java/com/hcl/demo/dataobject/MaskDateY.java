package com.hcl.demo.dataobject;

import java.io.Serializable;

import org.apache.commons.lang3.StringUtils;

import com.hcl.demo.util.DemoUtils;

/**
 * **********************************************************************
 *
 *  HCL CONFIDENTIAL
 *  _________________________________________________________________________________
 *
 *  HCL is a trademark of HCL Company.
 *
 *  Copyright © 2020 HCL. All rights reserved.
 *
 *  NOTICE: All information contained herein is, and remains the property of HCL
 *  and its suppliers, if any. The intellectual and technical concepts contained
 *  herein are proprietary to HCL and its suppliers and may be covered by U.S.
 *  and Foreign Patents, patents in process, and are protected by trade secret or
 *  copyright law. Dissemination of this information or reproduction of this
 *  material is strictly forbidden unless prior written permission is obtained
 *  from HCL.
 *
 * ***********************************************************************
 */
// Author : Generated by ATMA ®
// Revision History :
public class MaskDateY extends BaseBO<MaskDateY> implements Serializable {

	private static final long serialVersionUID = 1L;

	public MaskDateY() {
		super();
	}

	public MaskDateY(String data) {
		super();
		
		if(data.trim().length()>0 && null!=data) {
		setData(data);
		}
	}

	private Integer maskSs;

	private MaskDate maskDate = new MaskDate();

	private FillerMaskDate1 fillerMaskDate1 = new FillerMaskDate1();

	public Integer getMaskSs() {
		return maskSs;
	}

	public void setMaskSs(Integer maskSs) {
		this.maskSs = maskSs;
	}

	public MaskDate getMaskDate() {
		return maskDate;
	}

	public void setMaskDate(MaskDate maskDate) {
		this.maskDate = maskDate;
	}

	public FillerMaskDate1 getFillerMaskDate1() {
		return fillerMaskDate1;
	}

	public void setFillerMaskDate1(FillerMaskDate1 fillerMaskDate1) {
		this.setData(fillerMaskDate1.toString());
	}

	public void setData(String baseData) {
		baseData = StringUtils.rightPad(baseData, 6);
		this.setMaskSs((Integer) DemoUtils.readFieldAsNumber(baseData.substring(0, 2), "##", Integer.class));
		this.setMaskDate(new MaskDate(baseData.substring(2, 8)));
	}

	/*
	 * @Override public String toString() { return getMaskDate().toString(); }
	 */

	public class FillerMaskDate1 extends BaseBO<FillerMaskDate1> {

		public Integer getMaskAa() {
			String baseData = getMaskDate().toString();
			return DemoUtils.parseToInt(baseData.substring(0, 2));
		}

		public void setMaskAa(Integer maskAa) {
			String baseData = getMaskDate().toString();
			baseData = StringUtils.rightPad(baseData, 6);
			baseData = StringUtils.overlay(baseData, maskAa.toString(), 0, 2);
			getMaskDate().setData(baseData);
		}

		public Integer getMaskMmdd() {
			String baseData = getMaskDate().toString();
			return DemoUtils.parseToInt(baseData.substring(2, 6));
		}

		public void setMaskMmdd(Integer maskMmdd) {
			String baseData = getMaskDate().toString();
			baseData = StringUtils.rightPad(baseData, 6);
			baseData = StringUtils.overlay(baseData, maskMmdd.toString(), 2, 6);
			getMaskDate().setData(baseData);
		}

		public void setData(String baseData) {
			baseData = StringUtils.rightPad(baseData, 6);
		}

		@Override
		public String toString() {
			return getMaskDate().toString();
		}
	}
}
