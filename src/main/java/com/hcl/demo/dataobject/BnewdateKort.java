package com.hcl.demo.dataobject;

import java.io.Serializable;

import org.apache.commons.lang3.StringUtils;

import com.hcl.demo.util.DemoUtils;

/**
 * **********************************************************************
 *
 *  HCL CONFIDENTIAL
 *  _________________________________________________________________________________
 *
 *  HCL is a trademark of HCL Company.
 *
 *  Copyright © 2020 HCL. All rights reserved.
 *
 *  NOTICE: All information contained herein is, and remains the property of HCL
 *  and its suppliers, if any. The intellectual and technical concepts contained
 *  herein are proprietary to HCL and its suppliers and may be covered by U.S.
 *  and Foreign Patents, patents in process, and are protected by trade secret or
 *  copyright law. Dissemination of this information or reproduction of this
 *  material is strictly forbidden unless prior written permission is obtained
 *  from HCL.
 *
 * ***********************************************************************
 */
// Author : Generated by ATMA ®
// Revision History :
public class BnewdateKort extends BaseBO<BnewdateKort> implements Serializable {

	private static final long serialVersionUID = 1L;

	public BnewdateKort() {
		super();
	}

	public BnewdateKort(String data) {
		super();
		setData(data);
	}

	private Integer newdAammdd;

	private NewdAammddA newdAammddA = new NewdAammddA();

	public Integer getNewdAammdd() {
		return newdAammdd;
	}

	public void setNewdAammdd(Integer newdAammdd) {
		this.newdAammdd = newdAammdd;
	}

	public NewdAammddA getNewdAammddA() {
		return newdAammddA;
	}

	public void setNewdAammddA(NewdAammddA newdAammddA) {
		this.setData(newdAammddA.toString());
	}

	public void setData(String baseData) {
		baseData = StringUtils.rightPad(baseData, 6);
		this.setNewdAammdd((Integer) DemoUtils.readFieldAsNumber(baseData.substring(0, 6), "######", Integer.class));
	}

	@Override
	public String toString() {
		return getNewdAammdd().toString();
	}

	public class NewdAammddA extends BaseBO<NewdAammddA> {

		public Integer getNewdAa() {
			String baseData = getNewdAammdd().toString();
			return DemoUtils.parseToInt(baseData.substring(0, 2));
		}

		public void setNewdAa(Integer newdAa) {
			String baseData = getNewdAammdd().toString();
			baseData = StringUtils.leftPad(baseData, 6);
			baseData = StringUtils.overlay(baseData, StringUtils.leftPad(newdAa.toString(), 2), 0, 2);
			setNewdAammdd(DemoUtils.parseToInt(baseData));
		}

		public Integer getNewdMm() {
			String baseData = getNewdAammdd().toString();
			return DemoUtils.parseToInt(baseData.substring(2, 4));
		}

		public void setNewdMm(Integer newdMm) {
			String baseData = getNewdAammdd().toString();
			baseData = StringUtils.leftPad(baseData, 6);
			baseData = StringUtils.overlay(baseData, StringUtils.leftPad(newdMm.toString(), 2), 2, 4);
			setNewdAammdd(DemoUtils.parseToInt(baseData));
		}

		public Integer getNewdDd() {
			String baseData = getNewdAammdd().toString();
			return DemoUtils.parseToInt(baseData.substring(4, 6));
		}

		public void setNewdDd(Integer newdDd) {
			String baseData = getNewdAammdd().toString();
			baseData = StringUtils.leftPad(baseData, 6);
			baseData = StringUtils.overlay(baseData, StringUtils.leftPad(newdDd.toString(), 2), 4, 6);
			setNewdAammdd(DemoUtils.parseToInt(baseData));
		}

		public void setData(String baseData) {
			baseData = StringUtils.rightPad(baseData, 6);
		}

		@Override
		public String toString() {
			return getNewdAammdd().toString();
		}
	}
}
