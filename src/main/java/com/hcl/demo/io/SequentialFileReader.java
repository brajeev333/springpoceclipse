package com.hcl.demo.io;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import org.springframework.core.io.FileSystemResourceLoader;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ClassPathResource;

/*************************************************************************
 *
 * HCL CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * HCL is a trademark of HCL Company.
 *
 * Copyright © 2020 HCL. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of HCL
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to HCL and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from HCL.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :


public class SequentialFileReader {
    private String filePath;
    private int currentRecordIndex = -1;
    private String currentRecord = null;
    private boolean isOpen = false;
    private ArrayList<String> records = new ArrayList<String>();

    public SequentialFileReader(String filePath) {
        super();
        this.filePath = filePath;
    }

    public int getCurrentRecordIndex() {
        return currentRecordIndex;
    }

    public void setCurrentRecordIndex(int currentRecordIndex) {
        this.currentRecordIndex = currentRecordIndex;
    }

    public String getCurrentRecord() {
        return currentRecord;
    }

    public void setCurrentRecord(String currentRecord) {
        this.currentRecord = currentRecord;
    }

    public boolean isOpen() {
        return isOpen;
    }

    public void setOpen(boolean isOpen) {
        this.isOpen = isOpen;
    }

    public void open() {
        BufferedReader bufReader = null;
        
        try {
        	
        // original code
        	//bufReader = new BufferedReader(new FileReader(filePath));
        	
      //brajeev code
        	Resource resource = new ClassPathResource("test.txt");
        	bufReader = new BufferedReader(new InputStreamReader(resource.getInputStream()));
        //  //brajeev code	
            isOpen = true;
            currentRecordIndex = -1;
            String line = null;
            while ((line = bufReader.readLine()) != null) {
                records.add(line);
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            if (bufReader != null) {
                try {
                    bufReader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public boolean readNextRecord() {
        if (!isOpen) {
            open();
        }
        if (currentRecordIndex + 1 < records.size()) {
            currentRecord = records.get(currentRecordIndex + 1);
            currentRecordIndex++;
            return true;
        } else {
            return false;
        }
    }


}
