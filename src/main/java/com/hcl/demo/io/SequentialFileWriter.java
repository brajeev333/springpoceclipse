package com.hcl.demo.io;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.hcl.demo.util.DemoUtils;

/*************************************************************************
 *
 * HCL CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * HCL is a trademark of HCL Company.
 *
 * Copyright © 2020 HCL. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of HCL
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to HCL and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from HCL.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :

public class SequentialFileWriter {

	private String filePath;
	private ArrayList<String> records;
	BufferedReader bufReader = new BufferedReader(new FileReader("skrivKoerlog.txt"));

	public String getFilePath() {
		return filePath;
	}

	public void setFilePath(String filePath) throws IOException {
		DemoUtils.checkIfWritable(filePath);
		this.filePath = filePath;
	}

	public ArrayList<String> getRecords() {
		return records;
	}

	public void setRecords(ArrayList<String> records) {
		this.records = records;
	}

	public SequentialFileWriter(String filePath) throws IOException {
		super();

		DemoUtils.checkIfWritable(filePath);
		this.filePath = filePath;
	}

	public void write() throws IOException {
		FileOutputStream fos = null;
		String str = "";
		try {
		fos = new FileOutputStream(new File(filePath));
			
			for (String record : records) {
				record += System.getProperty("line.separator");
				fos.write(record.getBytes());
			}
			fos.flush();
		} catch (IOException e) {
			throw e;
		} finally {

			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public void writeLogs() throws IOException {
		FileOutputStream fos = null;
		FileInputStream fis = null;

		try {
			fos = new FileOutputStream(new File(filePath), true);
			for (String record : records) {
				record += System.getProperty("line.separator");
				fos.write(record.getBytes());
			}
			fos.flush();
		} catch (IOException e) {
			throw e;
		} finally {

			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public void addRecord(String record) throws IOException {
		if (this.records == null) {
			this.records = new ArrayList<String>();
		}
		this.records.add(record);
	}
}