package com.hcl.demo.rest;

import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


import com.hcl.demo.dataobject.Vpbv05Wrapper;
import com.hcl.demo.exception.DemoBusinessException;
import com.hcl.demo.exception.DemoRestException;
import com.hcl.demo.service.IVpbv05Service;
import com.hcl.demo.util.DemoLogger;
import com.hcl.demo.util.DemoConstants;


/*************************************************************************
 *
 * HCL CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * HCL is a trademark of HCL Company.
 *
 * Copyright © 2020 HCL. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of HCL
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to HCL and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from HCL.
 *
 *
 * Author : Generated by ATMA ®
 * Revision History :
 *----------------------------------------------------------------------------------------------------------------------------------------------------
 *  ROW #	 DOCUMENT & Version,    			 REVISION DATE	 AUTHOR 				REVISION DESCRIPTION 		 REVISION TRACKING NOTES
 *    	     Release or Build Number
 *------------------------------------------------------------------------------------------------------------------------------------------------------
 *    1		 0.1												                   ATMA    		    Initial Conversion		   Converted from Legacy into Java
 *
 ******************************************************************************************************************************************************/
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/vpbv05controller")
public class Vpbv05Controller {

    private static final DemoLogger LOGGER = DemoLogger.create(Vpbv05Controller.class);

    @Autowired
    private IVpbv05Service vpbv05Service;

    public void setIVpbv05Service(IVpbv05Service vpbv05Service) {
        this.vpbv05Service = vpbv05Service;
    }

    /*
     * Method execute
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    //vikash method .
    
      @RequestMapping("/test")
      public String Disply() {
    	  System.out.println("Hiiiiiiiiiii");
    	  LOGGER.debug("this is test message");
    	  LOGGER.info("this is test message");
    	  
    	  return "welcome to india ";
      }
    
    
    @RequestMapping(value = "/execute" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper execute() throws DemoRestException {
    	
    	 Vpbv05Wrapper vpbv05Wrapper = new  Vpbv05Wrapper(); 
    	
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.execute(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method bInit
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
  /* @RequestMapping(value = "/bInit" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper bInit(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.bInit(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }*/
    
    @RequestMapping(value = "/bInit" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public  Vpbv05Wrapper  bInit(Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
    	   System.out.println("Test ####### ");
    	
    	//System.out.println("Test1 ####### "+vpbv05Wrapper.getVpbv05BO().get(0).getInfilPost());
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.bInit(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        //LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    
    //Vikash method for testing :
    
    @RequestMapping(value = "/bInit1" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public  String  bInit1(Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
    	System.out.println("Test ####### ");
      /*  LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.bInit(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        //LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;*/
    	
    	return "ATAMA testing  !!!!  ";
    }
    
    
    /*
     * Method bMaskDat
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/bMaskDat" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper bMaskDat(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.bMaskDat(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method bMaskTid
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/bMaskTid" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper bMaskTid(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.bMaskTid(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method readInfil
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/readInfil" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper readInfil(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.readInfil(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method skrivTvvpsku
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/skrivTvvpsku" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper skrivTvvpsku(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.skrivTvvpsku(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method skrivKoerlog
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/skrivKoerlog" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper skrivKoerlog(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.skrivKoerlog(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
    /*
     * Method zAbend
     * @param vpbv05Wrapper
     * @return vpbv05Wrapper
     * @throws DemoRestException
    */
    @RequestMapping(value = "/zAbend" , method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE, consumes=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Vpbv05Wrapper zAbend(@RequestBody Vpbv05Wrapper vpbv05Wrapper) throws DemoRestException {
        LOGGER.debug(DemoConstants.REQUEST, vpbv05Wrapper);
        try {
            vpbv05Wrapper = vpbv05Service.zAbend(vpbv05Wrapper);
        } catch (DemoBusinessException dataEx) {
            LOGGER.error(DemoConstants.ERROR , dataEx);
            throw new DemoRestException(dataEx);
        } catch (Exception ex) {
            LOGGER.error(DemoConstants.ERROR , ex);
            throw new DemoRestException(ex);
        }
        LOGGER.debug(DemoConstants.RESPONSE, vpbv05Wrapper);
        return vpbv05Wrapper;
    }
}